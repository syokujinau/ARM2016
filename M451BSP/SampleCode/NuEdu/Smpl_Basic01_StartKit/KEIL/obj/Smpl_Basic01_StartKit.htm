<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\Smpl_Basic01_StartKit.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\Smpl_Basic01_StartKit.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Wed Nov 23 14:37:12 2016
<BR><P>
<H3>Maximum Stack Usage =        148 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
PWM0P2_IRQHandler &rArr; IrDa_NEC_Rx &rArr; IrDA_Code_Exe &rArr; Write_Buzzer &rArr; PWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[f]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">ACMP01_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[34]">ADC00_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[35]">ADC01_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[37]">ADC02_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[38]">ADC03_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[a]">BOD_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[22]">BRAKE0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[26]">BRAKE1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3f]">CAN0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[e]">CLKFAIL_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[33]">DAC_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[f]">Default_Handler</a> from startup_m451series.o(.text) referenced 9 times from startup_m451series.o(RESET)
 <LI><a href="#[14]">EINT0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[15]">EINT1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[16]">EINT2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[17]">EINT3_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[18]">EINT4_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[19]">EINT5_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1a]">GPA_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1b]">GPB_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1c]">GPC_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1d]">GPD_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1e]">GPE_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1f]">GPF_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[43]">Hard_Fault_Handler</a> from retarget.o(i.Hard_Fault_Handler) referenced from retarget.o(.emb_text)
 <LI><a href="#[30]">I2C0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from nuedu-basic01_eeprom.o(i.I2C1_IRQHandler) referenced from startup_m451series.o(RESET)
 <LI><a href="#[46]">I2C_MasterRx</a> from nuedu-basic01_eeprom.o(i.I2C_MasterRx) referenced from nuedu-basic01_eeprom.o(i.I2C_EEPROM_Read)
 <LI><a href="#[47]">I2C_MasterTx</a> from nuedu-basic01_eeprom.o(i.I2C_MasterTx) referenced from nuedu-basic01_eeprom.o(i.I2C_EEPROM_Write)
 <LI><a href="#[b]">IRC_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[32]">PDMA_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[23]">PWM0P0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[24]">PWM0P1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[25]">PWM0P2_IRQHandler</a> from nuedu-basic01_irda_nec.o(i.PWM0P2_IRQHandler) referenced from startup_m451series.o(RESET)
 <LI><a href="#[27]">PWM1P0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[28]">PWM1P1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[29]">PWM1P2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[c]">PWRWU_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[d]">RAMPE_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[49]">Reset_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[40]">SC0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[20]">SPI0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[21]">SPI1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_m451series.o(i.SystemInit) referenced from startup_m451series.o(.text)
 <LI><a href="#[11]">TAMPER_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[41]">TK_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2a]">TMR0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2b]">TMR1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2c]">TMR2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2d]">TMR3_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2e]">UART0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2f]">UART1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[39]">UART2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3a]">UART3_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3c]">USBD_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3d]">USBH_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3e]">USBOTG_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[12]">WDT_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[13]">WWDT_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[45]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m451series.o(.text)
 <LI><a href="#[48]">fputc</a> from retarget.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[42]">main</a> from main.o(i.main) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[52]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>Reset_Handler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, startup_m451series.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ADC00_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ADC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ADC02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ADC03_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CLKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PWM0P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PWM0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PWM1P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PWM1P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM1P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RAMPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USBH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LED_Bar
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4d]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[4b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>CLK_DisablePLL</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.CLK_DisablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[5e]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_SPI_Flash
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Buzzer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_ADC_Knob
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_NEC_TxRx_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[53]"></a>CLK_EnablePLL</STRONG> (Thumb, 350 bytes, Stack size 44 bytes, clk.o(i.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_EnablePLL
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[87]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[56]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(i.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[58]"></a>CLK_SetCoreClock</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, clk.o(i.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[59]"></a>CLK_SetHCLK</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[67]"></a>CLK_SetModuleClock</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_SPI_Flash
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Buzzer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_ADC_Knob
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_NEC_TxRx_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[55]"></a>CLK_WaitClockReady</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[7b]"></a>EADC_ConfigSampleModule</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, eadc.o(i.EADC_ConfigSampleModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EADC_ConfigSampleModule
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_ADC_Knob
</UL>

<P><STRONG><a name="[79]"></a>EADC_Open</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eadc.o(i.EADC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_ADC_Knob
</UL>

<P><STRONG><a name="[7a]"></a>EADC_SetInternalSampleTime</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, eadc.o(i.EADC_SetInternalSampleTime))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_ADC_Knob
</UL>

<P><STRONG><a name="[64]"></a>GPIO_SetMode</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Seven_Segment
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_LED
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_Key_Input
</UL>

<P><STRONG><a name="[97]"></a>Get_ADC_Knob</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nuedu-basic01_adc_knob.o(i.Get_ADC_Knob))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>Get_Key_Input</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nuedu-basic01_button.o(i.Get_Key_Input))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>Hard_Fault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nuedu-basic01_eeprom.o(i.I2C1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearTimeoutFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C_ClearTimeoutFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_ClearTimeoutFlag))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>I2C_EEPROM_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, nuedu-basic01_eeprom.o(i.I2C_EEPROM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_EEPROM_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetBusClockFreq
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableInt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>I2C_EEPROM_Read</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nuedu-basic01_eeprom.o(i.I2C_EEPROM_Read))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>I2C_EEPROM_Write</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nuedu-basic01_eeprom.o(i.I2C_EEPROM_Write))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>I2C_EnableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_Init
</UL>

<P><STRONG><a name="[60]"></a>I2C_GetBusClockFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c.o(i.I2C_GetBusClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_Init
</UL>

<P><STRONG><a name="[46]"></a>I2C_MasterRx</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, nuedu-basic01_eeprom.o(i.I2C_MasterRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_MasterRx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nuedu-basic01_eeprom.o(i.I2C_EEPROM_Read)
</UL>
<P><STRONG><a name="[47]"></a>I2C_MasterTx</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, nuedu-basic01_eeprom.o(i.I2C_MasterTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_MasterTx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nuedu-basic01_eeprom.o(i.I2C_EEPROM_Write)
</UL>
<P><STRONG><a name="[5f]"></a>I2C_Open</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, i2c.o(i.I2C_Open))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_Init
</UL>

<P><STRONG><a name="[63]"></a>Initial_Key_Input</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nuedu-basic01_button.o(i.Initial_Key_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Initial_Key_Input &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>Initial_LED</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nuedu-basic01_led.o(i.Initial_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Initial_LED &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>Initial_PWM_LED</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nuedu-basic01_rgbled.o(i.Initial_PWM_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Initial_PWM_LED &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>IrDA_Code_Exe</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.IrDA_Code_Exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IrDA_Code_Exe &rArr; Write_Buzzer &rArr; PWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Buzzer
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx
</UL>

<P><STRONG><a name="[6b]"></a>IrDA_NEC_TxRx_Init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, nuedu-basic01_irda_nec.o(i.IrDA_NEC_TxRx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IrDA_NEC_TxRx_Init &rArr; PWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_EnableCaptureInt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_EnableCapture
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigCaptureChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>IrDa_NEC_Rx</STRONG> (Thumb, 730 bytes, Stack size 64 bytes, nuedu-basic01_irda_nec.o(i.IrDa_NEC_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = IrDa_NEC_Rx &rArr; IrDA_Code_Exe &rArr; Write_Buzzer &rArr; PWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Code_Exe
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0P2_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>Mark</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nuedu-basic01_irda_nec.o(i.Mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mark
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_EnableOutput
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DisableOutput
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNEC
</UL>

<P><STRONG><a name="[78]"></a>Open_ADC_Knob</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, nuedu-basic01_adc_knob.o(i.Open_ADC_Knob))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Open_ADC_Knob &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_SetInternalSampleTime
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_Open
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_ConfigSampleModule
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>Open_Buzzer</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nuedu-basic01_buzzer.o(i.Open_Buzzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Open_Buzzer &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>Open_SPI_Flash</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nuedu-basic01_spi_flash.o(i.Open_SPI_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Open_SPI_Flash &rArr; SPI_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DisableAutoSS
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>Open_Seven_Segment</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, nuedu-basic01_7_segment.o(i.Open_Seven_Segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Open_Seven_Segment &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>PWM0P2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nuedu-basic01_irda_nec.o(i.PWM0P2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = PWM0P2_IRQHandler &rArr; IrDa_NEC_Rx &rArr; IrDA_Code_Exe &rArr; Write_Buzzer &rArr; PWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ClearCaptureIntFlag
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>PWM_ClearCaptureIntFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm.o(i.PWM_ClearCaptureIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0P2_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>PWM_ConfigCaptureChannel</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, pwm.o(i.PWM_ConfigCaptureChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PWM_ConfigCaptureChannel &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_NEC_TxRx_Init
</UL>

<P><STRONG><a name="[6c]"></a>PWM_ConfigOutputChannel</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, pwm.o(i.PWM_ConfigOutputChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Buzzer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LED
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_NEC_TxRx_Init
</UL>

<P><STRONG><a name="[77]"></a>PWM_DisableOutput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWM_DisableOutput))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Buzzer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mark
</UL>

<P><STRONG><a name="[70]"></a>PWM_EnableCapture</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(i.PWM_EnableCapture))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_NEC_TxRx_Init
</UL>

<P><STRONG><a name="[6f]"></a>PWM_EnableCaptureInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm.o(i.PWM_EnableCaptureInt))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_NEC_TxRx_Init
</UL>

<P><STRONG><a name="[75]"></a>PWM_EnableOutput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWM_EnableOutput))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Buzzer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LED
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mark
</UL>

<P><STRONG><a name="[83]"></a>PWM_LED</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nuedu-basic01_rgbled.o(i.PWM_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = PWM_LED &rArr; PWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_EnableOutput
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>PWM_Start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm.o(i.PWM_Start))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Buzzer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LED
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_NEC_TxRx_Init
</UL>

<P><STRONG><a name="[84]"></a>SPACE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nuedu-basic01_irda_nec.o(i.SPACE))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNEC
</UL>

<P><STRONG><a name="[7f]"></a>SPI_DisableAutoSS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_DisableAutoSS))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_SPI_Flash
</UL>

<P><STRONG><a name="[7e]"></a>SPI_Open</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, spi.o(i.SPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_SPI_Flash
</UL>

<P><STRONG><a name="[86]"></a>SYS_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>SYS_ResetModule</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Buzzer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_NEC_TxRx_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[92]"></a>SendChar_ToUART</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, retarget.o(i.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[88]"></a>SendNEC</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nuedu-basic01_irda_nec.o(i.SendNEC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendNEC &rArr; Mark
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPACE
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mark
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>Show_Seven_Segment</STRONG> (Thumb, 248 bytes, Stack size 36 bytes, nuedu-basic01_7_segment.o(i.Show_Seven_Segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Show_Seven_Segment
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>SpiFlash_ReadMidDid</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, nuedu-basic01_spi_flash.o(i.SpiFlash_ReadMidDid))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, system_m451series.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigCaptureChannel
</UL>

<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, system_m451series.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>UART0_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART0_Init &rArr; UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>UART_Open</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[6a]"></a>Write_Buzzer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nuedu-basic01_buzzer.o(i.Write_Buzzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Write_Buzzer &rArr; PWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_EnableOutput
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DisableOutput
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Code_Exe
</UL>

<P><STRONG><a name="[8c]"></a>Write_LED_Bar</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, nuedu-basic01_led.o(i.Write_LED_Bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Write_LED_Bar
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a3]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[5a]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTx
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRx
</UL>

<P><STRONG><a name="[a4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[48]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[42]"></a>main</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = main &rArr; PWM_LED &rArr; PWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LED_Bar
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Buzzer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_ReadMidDid
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Seven_Segment
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNEC
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LED
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Seven_Segment
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_SPI_Flash
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Buzzer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_ADC_Knob
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_NEC_TxRx_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_LED
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_Key_Input
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_Write
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_Read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Key_Input
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Knob
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spi.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[5b]"></a>stackDump</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, retarget.o(i.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[8b]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uart.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[82]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pwm.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigCaptureChannel
</UL>

<P><STRONG><a name="[62]"></a>I2C_STOP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nuedu-basic01_eeprom.o(i.I2C_STOP))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTx
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRx
</UL>

<P><STRONG><a name="[76]"></a>CLK_SysTickDelay</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nuedu-basic01_irda_nec.o(i.CLK_SysTickDelay))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPACE
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mark
</UL>

<P><STRONG><a name="[8f]"></a>_printf_core</STRONG> (Thumb, 1010 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[91]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[90]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
